{
  "openapi": "3.0.1",
  "info": {
      "title": "Data Oculus API",
      "description": "API documentation for Data Oculus",
      "version": "1.0.0",
      "contact": {},
      "license": {}
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local development server"
    }
  ],
  "tags": [
      {
          "name": "account",
          "description": "Account setup CRUD Operations"
      },
      {
          "name": "Data Contract",
          "description": "CRUD operations"
      },
      {
          "name": "DataError",
          "description": "CRUD Operations"
      },
      {
          "name": "Database",
          "description": "CRUD Operations"
      },
      {
          "name": "Dataset",
          "description": "CRUD Operations"
      },
      {
          "name": "Datastore",
          "description": "CRUD Operations"
      },
      {
          "name": "Domain",
          "description": "CRUD Operations"
      },
      {
          "name": "Dummy",
          "description": "Dummy collections"
      },
      {
          "name": "Extension_Config",
          "description": "extension Operations"
      },
      {
          "name": "JobError",
          "description": "CRUD Operations"
      },
      {
          "name": "Job Executions",
          "description": "CRUD Operation on job executions"
      },
      {
          "name": "Job",
          "description": "CRUD Operations"
      },
      {
          "name": "Data Profile Task",
          "description": "CRUD Operations"
      },
      {
          "name": "Data Quality Task",
          "description": "CRUD Operations"
      },
      {
          "name": "Rule Task",
          "description": "CRUD Operations"
      },
      {
          "name": "Catalog Search",
          "description": "CRUD Operations"
      },
      {
          "name": "Secret collection",
          "description": "Secret collection"
      },
      {
          "name": "User",
          "description": "CRUD Operations"
      },
      {
          "name": "healthcheck",
          "description": "status operation for healthcheck"
      }
  ],
  "paths": {
      "/v1/account/check_and_create_data_processing_cluster": {
          "post": {
              "tags": [
                  "account"
              ],
              "summary": "creates data processing cluster if it does not exists already ",
              "description": "creates data processing cluster if it does not exists already",
              "operationId": "checkAndCreateClusterAndJob",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/JsonNode"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "The service account setup API",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/User"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  }
              }
          }
      },
      "/v1/account/check_and_create_data_processing_serverless_job": {
          "post": {
              "tags": [
                  "account"
              ],
              "summary": "creates data processing cluster if it does not exists already ",
              "description": "creates data processing cluster if it does not exists already",
              "operationId": "checkAndCreateServerlessJob",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/JsonNode"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "The service account setup API",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/User"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  }
              }
          }
      },
      "/v1/account/clean_all_jobs_watermark_metrics_with_status": {
          "post": {
              "tags": [
                  "account"
              ],
              "summary": "creates data processing cluster if it does not exists already ",
              "description": "creates data processing cluster if it does not exists already",
              "operationId": "cleanAllFailedJobs",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/JsonNode"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "The service account setup API",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/User"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  }
              }
          }
      },
      "/v1/account": {
          "get": {
              "tags": [
                  "account"
              ],
              "summary": "Get a DOP account",
              "description": "Get a `DOP` account",
              "operationId": "getAccountInfo",
              "responses": {
                  "200": {
                      "description": "The user",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/User"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "User for instance id is not found"
                  }
              }
          },
          "put": {
              "tags": [
                  "account"
              ],
              "summary": "setup a DOP account",
              "description": "Setup new GCP cloud account with service account key.",
              "operationId": "updateAccount",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/DOPAccount"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "The service account setup API",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/User"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  }
              }
          },
          "post": {
              "tags": [
                  "account"
              ],
              "summary": "create a DOP account",
              "description": "Setup new DOP account with all required information.",
              "operationId": "createAccountInfo",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/DOPAccount"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "The service account setup API",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/User"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  }
              }
          }
      },
      "/v1/account/conf/secret/{secret_key_name}": {
          "put": {
              "tags": [
                  "account"
              ],
              "summary": "setup a GCP account",
              "description": "Setup new GCP cloud account with service account key.",
              "operationId": "updateCloudProjectSAKey",
              "parameters": [
                  {
                      "name": "secret_key_name",
                      "in": "path",
                      "description": "secret key name to get value of",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "The service account setup API",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/User"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  }
              }
          },
          "post": {
              "tags": [
                  "account"
              ],
              "summary": "setup a GCP account",
              "description": "Setup new GCP cloud account with service account key.",
              "operationId": "createCloudProjectSAKey",
              "parameters": [
                  {
                      "name": "secret_key_name",
                      "in": "path",
                      "description": "secret key name to get value of",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "The service account setup API",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/User"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  }
              }
          },
          "delete": {
              "tags": [
                  "account"
              ],
              "summary": "delete GCP account key",
              "description": "delete GCP account key when key is `deactivated`.",
              "operationId": "deleteCloudProjectSAKey",
              "parameters": [
                  {
                      "name": "secret_key_name",
                      "in": "path",
                      "description": "secret key name to get value of",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "404": {
                      "description": "User for instance id is not found"
                  }
              }
          }
      },
      "/v1/account/conf/secret/{secret_name}": {
          "get": {
              "tags": [
                  "account"
              ],
              "summary": "Get a secret key from config.",
              "description": "Get a secret key from config.",
              "operationId": "getCloudProjectSAKey",
              "parameters": [
                  {
                      "name": "secret_name",
                      "in": "path",
                      "description": "secret key name to get value of",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The user",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/User"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "User for instance id is not found"
                  }
              }
          }
      },
      "/v1/account/catalog/{catalog_name}/sync": {
          "put": {
              "tags": [
                  "account"
              ],
              "summary": "sync_catalog_now",
              "description": "sync_catalog_now.",
              "operationId": "triggerCatalogSyncNow",
              "parameters": [
                  {
                      "name": "catalog_name",
                      "in": "path",
                      "description": "Fully qualified name of the dataset",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The service account setup API",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/User"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  }
              }
          }
      },
      "/v1/account/streaming_interval": {
          "put": {
              "tags": [
                  "account"
              ],
              "summary": "setup a DOP account",
              "description": "Setup new GCP cloud account with service account key.",
              "operationId": "updateStreamingInterval",
              "parameters": [
                  {
                      "name": "interval",
                      "in": "query",
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The service account setup API",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/User"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  }
              }
          }
      },
      "/v1/datacontract": {
          "get": {
              "tags": [
                  "Data Contract"
              ],
              "summary": "List contracts",
              "description": "Get a list of contracts.",
              "operationId": "list",
              "parameters": [
                  {
                      "name": "datasetId",
                      "in": "query",
                      "description": "Id of the dataset for which all contracts are requested",
                      "schema": {
                          "type": "string",
                          "example": "datastore.database.dataset"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The contract list for a dataset",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/ResultList"
                              }
                          }
                      }
                  }
              }
          },
          "post": {
              "tags": [
                  "Data Contract"
              ],
              "summary": "Create a new contract",
              "description": "Create a new contract.",
              "operationId": "createNewDataContract",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/DataContract"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "The contract creation API",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DataContract"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  }
              }
          }
      },
      "/v1/datacontract/id": {
          "get": {
              "tags": [
                  "Data Contract"
              ],
              "summary": "Get a contract",
              "description": "Get a contract by `id`",
              "operationId": "get",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The user",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DataContract"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "contract with Id: id is not found"
                  }
              }
          },
          "put": {
              "tags": [
                  "Data Contract"
              ],
              "summary": "update contract",
              "description": "update contract",
              "operationId": "updateTask",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/DataContract"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "404": {
                      "description": "contract with ID: id not found"
                  }
              }
          },
          "delete": {
              "tags": [
                  "Data Contract"
              ],
              "summary": "delete a contract",
              "description": "contracts can be deleted by this API",
              "operationId": "delete",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "404": {
                      "description": "contract with ID: id is not found"
                  }
              }
          }
      },
      "/v1/datacontract/status": {
          "get": {
              "tags": [
                  "Data Contract"
              ],
              "summary": "Get a contract status ",
              "description": "Get a contract status between dates for a given dataset",
              "operationId": "getAllContractStatus",
              "parameters": [
                  {
                      "name": "datasetId",
                      "in": "query",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "after",
                      "in": "query",
                      "description": "Returns all contract status after this date",
                      "schema": {
                          "type": "string",
                          "format": "yyyy-MM-dd_HH:mm:ss"
                      }
                  },
                  {
                      "name": "before",
                      "in": "query",
                      "description": "Returns all contract status before this date",
                      "schema": {
                          "type": "string",
                          "format": "yyyy-MM-dd_HH:mm:ss"
                      }
                  },
                  {
                      "name": "last",
                      "in": "query",
                      "description": "Last N number of records sorted by high watermark",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 0
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The user",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DataContract"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "contract with Id: id is not found"
                  }
              }
          }
      },
      "/v1/datacontract/id/latest_status": {
          "get": {
              "tags": [
                  "Data Contract"
              ],
              "summary": "Get a contract",
              "description": "Get a contract by `id`",
              "operationId": "getStatusById",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The user",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DataContract"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "contract with Id: id is not found"
                  }
              }
          }
      },
      "/v1/dataError/id": {
          "delete": {
              "tags": [
                  "DataError"
              ],
              "summary": "delete dataError for job",
              "description": "delete dataError ",
              "operationId": "delete_1",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "Id of the dataset",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Limit the number dataError returned. (1 to 1000000, default = 10)",
                      "schema": {
                          "maximum": 10,
                          "minimum": 1,
                          "type": "integer",
                          "format": "int32",
                          "default": 1
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The issue list deleted successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DataErrorList"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/v1/dataError": {
          "get": {
              "tags": [
                  "DataError"
              ],
              "summary": "List dataError",
              "description": "Get a list of dataError. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
              "operationId": "list_1",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Limit the number dataError returned. (1 to 1000000, default = 10)",
                      "schema": {
                          "maximum": 1000000,
                          "minimum": 1,
                          "type": "integer",
                          "format": "int32",
                          "default": 10
                      }
                  },
                  {
                      "name": "before",
                      "in": "query",
                      "description": "Returns list of dataError before this cursor",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "after",
                      "in": "query",
                      "description": "Returns list of dataError after this cursor",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The user list",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DataErrorList"
                              }
                          }
                      }
                  }
              }
          },
          "delete": {
              "tags": [
                  "DataError"
              ],
              "summary": "delete all data issues for the dataset",
              "description": "delete dataError ",
              "operationId": "deleteAll",
              "parameters": [
                  {
                      "name": "datasetId",
                      "in": "query",
                      "description": "Id of the data issue",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Limit the number dataError returned. (1 to 1000000, default = 10)",
                      "schema": {
                          "maximum": 10,
                          "minimum": 1,
                          "type": "integer",
                          "format": "int32",
                          "default": 1
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The issue list deleted successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DataErrorList"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/v1/database": {
          "get": {
              "tags": [
                  "Database"
              ],
              "summary": "List databases for a given datastore Id",
              "description": "Get a list of databases, optionally filtered by `datastores` it belongs to. Use `fields` Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
              "operationId": "list_2",
              "parameters": [
                  {
                      "name": "datastoreId",
                      "in": "query",
                      "description": "Filter databases by datastore",
                      "schema": {
                          "type": "string",
                          "example": "BigQuery.orbital-poc-9"
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Limit the number dataset returned. (1 to 1000000, default = 10)",
                      "schema": {
                          "maximum": 1000,
                          "minimum": 1,
                          "type": "integer",
                          "format": "int32",
                          "default": 100
                      }
                  },
                  {
                      "name": "before",
                      "in": "query",
                      "description": "Returns list of dataset before this cursor",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "after",
                      "in": "query",
                      "description": "Returns list of dataset after this cursor",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "List of databases",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DatabaseList"
                              }
                          }
                      }
                  }
              }
          },
          "post": {
              "tags": [
                  "Database"
              ],
              "summary": "Create a database",
              "description": "Create a database under an existing `service`.",
              "operationId": "create",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Database"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "The database",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Database"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  }
              }
          }
      },
      "/v1/database/id": {
          "get": {
              "tags": [
                  "Database"
              ],
              "summary": "Get a database",
              "description": "Get a database by `id`.",
              "operationId": "get_1",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The database",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Database"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Database for instance id is not found"
                  }
              }
          }
      },
      "/v1/database/name/{name}": {
          "get": {
              "tags": [
                  "Database"
              ],
              "summary": "Get a database by name",
              "description": "Get a database by fully qualified name.",
              "operationId": "getByName",
              "parameters": [
                  {
                      "name": "name",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The database",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Database"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Database for instance id is not found"
                  }
              }
          }
      },
      "/v1/database/id/datasets": {
          "get": {
              "tags": [
                  "Database"
              ],
              "summary": "Get a database",
              "description": "Get a database by `id`.",
              "operationId": "getDatasets",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The database",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Database"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Database for instance id is not found"
                  }
              }
          }
      },
      "/v1/dataset/id/cleanup-and-re-run-job": {
          "delete": {
              "tags": [
                  "Dataset"
              ],
              "summary": "Clean up and Re-Run the job for a given dataset",
              "description": "cleans up by default last job execution and related metrics, unless 'all' flag is set in request",
              "operationId": "cleanAndReRun",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "Dataset Id",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "all",
                      "in": "query",
                      "description": "flag for all or last",
                      "schema": {
                          "type": "boolean"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The user",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Job"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "error cleaning job execution for datasetId id"
                  }
              }
          }
      },
      "/v1/dataset/count_changed_after": {
          "get": {
              "tags": [
                  "Dataset"
              ],
              "summary": "List datasets",
              "description": "Get a list of datasets, optionally filtered by `database` it belongs to. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
              "operationId": "countChangedDatasets",
              "parameters": [
                  {
                      "name": "time",
                      "in": "query",
                      "description": "any changed after this time",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "List of datasets",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DatasetList"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/v1/dataset": {
          "get": {
              "tags": [
                  "Dataset"
              ],
              "summary": "List datasets",
              "description": "Get a list of datasets, optionally filtered by `database` it belongs to. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
              "operationId": "list_3",
              "parameters": [
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "Fields requested in the returned resource",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "database",
                      "in": "query",
                      "description": "Filter datasets by database fully qualified name",
                      "schema": {
                          "type": "string",
                          "example": "GCS.orbital-poc-9.delta_db2"
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Limit the number datasets returned. (1 to 1000000, default = 10) ",
                      "schema": {
                          "maximum": 1000,
                          "minimum": 1,
                          "type": "integer",
                          "format": "int32",
                          "default": 30
                      }
                  },
                  {
                      "name": "before",
                      "in": "query",
                      "description": "Returns list of datasets before this cursor",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "after",
                      "in": "query",
                      "description": "Returns list of datasets after this cursor",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "List of datasets",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DatasetList"
                              }
                          }
                      }
                  }
              }
          },
          "put": {
              "tags": [
                  "Dataset"
              ],
              "summary": "Update a dataset",
              "description": "Update a new dataset under an existing `database`.",
              "operationId": "update",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Dataset"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "dataset",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Dataset"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  }
              }
          },
          "post": {
              "tags": [
                  "Dataset"
              ],
              "summary": "Create a dataset",
              "description": "Create a new dataset under an existing `database`.",
              "operationId": "create_1",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Dataset"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "dataset",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Dataset"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  }
              }
          }
      },
      "/v1/dataset/id": {
          "get": {
              "tags": [
                  "Dataset"
              ],
              "summary": "Get a datasets",
              "description": "Get a datasets by `id`",
              "operationId": "get_2",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "dataset Id",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "datasets",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Dataset"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Dataset for instance is not found"
                  }
              }
          },
          "delete": {
              "tags": [
                  "Dataset"
              ],
              "summary": "Delete a dataset",
              "description": "Delete a dataset by `id`. Dataset is not immediately deleted and is only marked as deleted.",
              "operationId": "delete_2",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "Id of the dataset",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "404": {
                      "description": "Dataset for instance id is not found"
                  }
              }
          }
      },
      "/v1/dataset/id/cleanup_bad_job_and_metrics": {
          "delete": {
              "tags": [
                  "Dataset"
              ],
              "summary": "Delete a dataset",
              "description": "Delete a dataset by `id`. Dataset is not immediately deleted and is only marked as deleted.",
              "operationId": "delete_3",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "Id of the dataset",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "lowWatermark",
                      "in": "query",
                      "description": "low watermark",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "highWatermark",
                      "in": "query",
                      "description": "high watermark",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "404": {
                      "description": "Dataset for instance id is not found"
                  }
              }
          }
      },
      "/v1/dataset/all_ids": {
          "get": {
              "tags": [
                  "Dataset"
              ],
              "summary": "Get a all dataset ids",
              "description": "Get a all dataset ids",
              "operationId": "getAllIds",
              "responses": {
                  "200": {
                      "description": "datasets",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Dataset"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Dataset for instance id is not found"
                  }
              }
          }
      },
      "/v1/dataset/id/{colName}/{aggOrIncr}/missingmap": {
          "get": {
              "tags": [
                  "Dataset"
              ],
              "summary": "Get bitmap for a column for aggregated view",
              "description": "Get bitmap for a column for aggregated view",
              "operationId": "getBitMapForAgg",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "dataset Id",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "colName",
                      "in": "path",
                      "description": "column name",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "aggOrIncr",
                      "in": "path",
                      "description": "low watermark",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "lowWatermark",
                      "in": "query",
                      "description": "low watermark",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "highWatermark",
                      "in": "query",
                      "description": "high watermark",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "resolution_percent",
                      "in": "query",
                      "description": "number of bins for the histogram (1 to 1000, default = 10) ",
                      "schema": {
                          "maximum": 100,
                          "minimum": 10,
                          "type": "integer",
                          "format": "int32",
                          "default": 30
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The user",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Job"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "BitMap metrics not found"
                  }
              }
          }
      },
      "/v1/dataset/name/{name}": {
          "get": {
              "tags": [
                  "Dataset"
              ],
              "summary": "Get a dataset by name",
              "description": "Get a dataset by fully qualified dataset name.",
              "operationId": "getByName_1",
              "parameters": [
                  {
                      "name": "name",
                      "in": "path",
                      "description": "Fully qualified name of the dataset",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "dataset",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Dataset"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Dataset for instance id is not found"
                  }
              }
          }
      },
      "/v1/dataset/id/metrics/profile/aggregated/columns": {
          "get": {
              "tags": [
                  "Dataset"
              ],
              "summary": "get dataset data metrics",
              "description": "Get data metrics for a dataset identified by `id`",
              "operationId": "getColumnProfileFull",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "dataset Id",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "last",
                      "in": "query",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 1
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "List of dataset versions",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DataMetricAggList"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/v1/dataset/id/metrics/profile/aggregated/columns/{colName}": {
          "get": {
              "tags": [
                  "Dataset"
              ],
              "summary": "get dataset data metrics",
              "description": "Get data metrics for a dataset identified by `id`",
              "operationId": "getColumnProfileFull_1",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "dataset Id",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "colName",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "history",
                      "in": "query",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 1
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "List of dataset versions",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DataMetricAggList"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/v1/dataset/id/metrics/profile/incr/columns": {
          "get": {
              "tags": [
                  "Dataset"
              ],
              "summary": "get dataset data metrics",
              "description": "Get data metrics for a dataset identified by `id`",
              "operationId": "getColumnProfileIncr",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "dataset Id",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "after",
                      "in": "query",
                      "description": "Returns all alerts after this date",
                      "schema": {
                          "type": "string",
                          "format": "yyyy-MM-dd_HH:mm:ss"
                      }
                  },
                  {
                      "name": "before",
                      "in": "query",
                      "description": "Returns all alerts before this date",
                      "schema": {
                          "type": "string",
                          "format": "yyyy-MM-dd_HH:mm:ss"
                      }
                  },
                  {
                      "name": "last",
                      "in": "query",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 0
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "List of dataset versions",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DataMetricList"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/v1/dataset/id/metrics/profile/incr/columns/{colName}": {
          "get": {
              "tags": [
                  "Dataset"
              ],
              "summary": "get dataset data metrics",
              "description": "Get data metrics for a dataset identified by `id`",
              "operationId": "getColumnProfileIncr_1",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "dataset Id",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "colName",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "after",
                      "in": "query",
                      "description": "Returns all alerts after this date",
                      "schema": {
                          "type": "string",
                          "format": "yyyy-MM-dd_HH:mm:ss"
                      }
                  },
                  {
                      "name": "before",
                      "in": "query",
                      "description": "Returns all alerts before this date",
                      "schema": {
                          "type": "string",
                          "format": "yyyy-MM-dd_HH:mm:ss"
                      }
                  },
                  {
                      "name": "last",
                      "in": "query",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 0
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "List of dataset versions",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DataMetricList"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/v1/dataset/datasetId/alerts": {
          "get": {
              "tags": [
                  "Dataset"
              ],
              "summary": "Get all alerts of the dataset",
              "description": "Get all alerts of the dataset",
              "operationId": "getDataIssues",
              "parameters": [
                  {
                      "name": "datasetId",
                      "in": "path",
                      "description": "dataset Id",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "after",
                      "in": "query",
                      "description": "Returns all alerts after this date",
                      "schema": {
                          "type": "string",
                          "format": "yyyy-MM-dd_HH:mm:ss"
                      }
                  },
                  {
                      "name": "before",
                      "in": "query",
                      "description": "Returns all alerts before this date",
                      "schema": {
                          "type": "string",
                          "format": "yyyy-MM-dd_HH:mm:ss"
                      }
                  },
                  {
                      "name": "include_unknown",
                      "in": "query",
                      "description": "include all errors for unknown range?",
                      "schema": {
                          "type": "boolean",
                          "format": "yyyy-MM-dd_HH:mm:ss",
                          "default": false
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "dataset",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Dataset"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Dataset for instance datasetId is not found"
                  }
              }
          }
      },
      "/v1/dataset/id/metrics/profile/aggregated/dataset": {
          "get": {
              "tags": [
                  "Dataset"
              ],
              "summary": "get latest dataset data metrics",
              "description": "Get data metrics for a dataset identified by `id`",
              "operationId": "getDataMetricFull",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "dataset Id",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "last",
                      "in": "query",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 1
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "List of dataset versions",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DataMetricAgg"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/v1/dataset/id/metrics/profile/incr/dataset": {
          "get": {
              "tags": [
                  "Dataset"
              ],
              "summary": "get dataset data metrics",
              "description": "Get data metrics for a dataset identified by `id`",
              "operationId": "getDataMetricIncr",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "dataset Id",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "after",
                      "in": "query",
                      "description": "Returns all alerts after this date",
                      "schema": {
                          "type": "string",
                          "format": "yyyy-MM-dd_HH:mm:ss"
                      }
                  },
                  {
                      "name": "before",
                      "in": "query",
                      "description": "Returns all alerts before this date",
                      "schema": {
                          "type": "string",
                          "format": "yyyy-MM-dd_HH:mm:ss"
                      }
                  },
                  {
                      "name": "last",
                      "in": "query",
                      "description": "Last N number of records sorted by high watermark",
                      "schema": {
                          "type": "integer",
                          "format": "int32",
                          "default": 0
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "List of dataset versions",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DataMetricList"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/v1/dataset/id/{colName}/missing_value_image": {
          "get": {
              "tags": [
                  "Dataset"
              ],
              "summary": "Get bitmap for a column",
              "description": "Get bitmap for a column",
              "operationId": "getMissingValueImage",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "dataset Id",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "colName",
                      "in": "path",
                      "description": "column name",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "lowWatermark",
                      "in": "query",
                      "description": "low watermark",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "highWatermark",
                      "in": "query",
                      "description": "high watermark",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "resolution_percent",
                      "in": "query",
                      "description": "number of bins for the histogram (1 to 1000, default = 10) ",
                      "schema": {
                          "maximum": 100,
                          "minimum": 10,
                          "type": "integer",
                          "format": "int32",
                          "default": 30
                      }
                  },
                  {
                      "name": "width",
                      "in": "query",
                      "description": "width of the image",
                      "schema": {
                          "type": "string",
                          "default": "100"
                      }
                  },
                  {
                      "name": "height",
                      "in": "query",
                      "description": "height of the image",
                      "schema": {
                          "type": "string",
                          "default": "1000"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The user",
                      "content": {
                          "image/png": {}
                      }
                  },
                  "404": {
                      "description": "BitMap metrics not found"
                  }
              }
          }
      },
      "/v1/dataset/id/monitoredChunks": {
          "get": {
              "tags": [
                  "Dataset"
              ],
              "summary": "get dataset chunks that were monitored",
              "description": "get dataset chunks that were monitored",
              "operationId": "getMonitoredChunks",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "dataset Id",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "after",
                      "in": "query",
                      "description": "Returns all alerts after this date",
                      "schema": {
                          "type": "string",
                          "format": "yyyy-MM-dd_HH:mm:ss"
                      }
                  },
                  {
                      "name": "before",
                      "in": "query",
                      "description": "Returns all alerts before this date",
                      "schema": {
                          "type": "string",
                          "format": "yyyy-MM-dd_HH:mm:ss"
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Limit the number datasets returned. (1 to 1000000, default = 10) ",
                      "schema": {
                          "maximum": 100,
                          "minimum": 1,
                          "type": "integer",
                          "format": "int32",
                          "default": 7
                      }
                  },
                  {
                      "name": "before",
                      "in": "query",
                      "description": "Returns list of datasets before this cursor",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "after",
                      "in": "query",
                      "description": "Returns list of datasets after this cursor",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "List of dataset versions",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DataMetricList"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/v1/dataset/datasetId/platform_errors": {
          "get": {
              "tags": [
                  "Dataset"
              ],
              "summary": "Get all alerts of the dataset",
              "description": "Get all alerts of the dataset",
              "operationId": "getPlatformErrors",
              "parameters": [
                  {
                      "name": "datasetId",
                      "in": "path",
                      "description": "dataset Id",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "after",
                      "in": "query",
                      "description": "Returns all alerts after this date",
                      "schema": {
                          "type": "string",
                          "format": "yyyy-MM-dd_HH:mm:ss"
                      }
                  },
                  {
                      "name": "before",
                      "in": "query",
                      "description": "Returns all alerts before this date",
                      "schema": {
                          "type": "string",
                          "format": "yyyy-MM-dd_HH:mm:ss"
                      }
                  },
                  {
                      "name": "include_unknown",
                      "in": "query",
                      "description": "include all errors for unknown range?",
                      "schema": {
                          "type": "boolean"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "dataset",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Dataset"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Dataset for instance datasetId is not found"
                  }
              }
          }
      },
      "/v1/dataset/id/{colName}/histogram": {
          "get": {
              "tags": [
                  "Dataset"
              ],
              "summary": "Get histogram metrics for a dataset",
              "description": "Get histogram metrics for a dataset",
              "operationId": "getUpdatedHistogram",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "dataset Id",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "colName",
                      "in": "path",
                      "description": "column name",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "lowWatermark",
                      "in": "query",
                      "description": "low watermark",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "highWatermark",
                      "in": "query",
                      "description": "high watermark",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "bins",
                      "in": "query",
                      "description": "number of bins for the histogram (1 to 1000, default = 10) ",
                      "schema": {
                          "maximum": 1000,
                          "minimum": 1,
                          "type": "integer",
                          "format": "int32",
                          "default": 10
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The user",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Job"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Metrics not found"
                  }
              }
          }
      },
      "/v1/dataset/id/{colName}/missingmap": {
          "get": {
              "tags": [
                  "Dataset"
              ],
              "summary": "Get bitmap for a column",
              "description": "Get bitmap for a column",
              "operationId": "getValueBitMap",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "dataset Id",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "colName",
                      "in": "path",
                      "description": "column name",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "lowWatermark",
                      "in": "query",
                      "description": "low watermark",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "highWatermark",
                      "in": "query",
                      "description": "high watermark",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "resolution_percent",
                      "in": "query",
                      "description": "number of bins for the histogram (1 to 1000, default = 10) ",
                      "schema": {
                          "maximum": 100,
                          "minimum": 10,
                          "type": "integer",
                          "format": "int32",
                          "default": 30
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The user",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Job"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "BitMap metrics not found"
                  }
              }
          }
      },
      "/v1/dataset/changed_after": {
          "get": {
              "tags": [
                  "Dataset"
              ],
              "summary": "List datasets",
              "description": "Get a list of datasets, optionally filtered by `database` it belongs to. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
              "operationId": "listChangedDatasets",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Limit the number datasets returned. (1 to 1000000, default = 10) ",
                      "schema": {
                          "maximum": 1000,
                          "minimum": 1,
                          "type": "integer",
                          "format": "int32",
                          "default": 30
                      }
                  },
                  {
                      "name": "before",
                      "in": "query",
                      "description": "Returns list of datasets before this cursor",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "after",
                      "in": "query",
                      "description": "Returns list of datasets after this cursor",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "time",
                      "in": "query",
                      "description": "any changed after this time",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "List of datasets",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DatasetList"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/v1/dataset/id/quality_score_config": {
          "put": {
              "tags": [
                  "Dataset"
              ],
              "summary": "Set configuration to measure quality score",
              "description": "Set configuration to measure quality score",
              "operationId": "setQualityScoreConfig",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "Dataset Id",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/QualityScoreConfig"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "The user",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "failed to set quality score measurement configuration for datasetId id"
                  }
              }
          }
      },
      "/v1/dataset/id/watermark": {
          "put": {
              "tags": [
                  "Dataset"
              ],
              "summary": "Set watermark info for the job",
              "description": "Set watermark info for the job",
              "operationId": "setWatermarkInfo",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "Dataset Id",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "watermarkColumns",
                      "in": "query",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "watermarkType",
                      "in": "query",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "watermarkInitialValue",
                      "in": "query",
                      "schema": {
                          "type": "integer",
                          "format": "int64"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The user",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Job"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "datasetId id not found"
                  }
              }
          }
      },
      "/v1/datastore": {
          "get": {
              "tags": [
                  "Datastore"
              ],
              "summary": "List datastores",
              "operationId": "list_4",
              "parameters": [
                  {
                      "name": "domain",
                      "in": "query",
                      "description": "Filter databases by domains",
                      "schema": {
                          "type": "string",
                          "example": "kaggle"
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "schema": {
                          "maximum": 10000,
                          "minimum": 1,
                          "type": "integer",
                          "format": "int32",
                          "default": 100
                      }
                  },
                  {
                      "name": "before",
                      "in": "query",
                      "description": "Returns list of datastores before this cursor",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "after",
                      "in": "query",
                      "description": "Returns list of datastore after this cursor",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "List of datastores",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DatastoreList"
                              }
                          }
                      }
                  }
              }
          },
          "post": {
              "tags": [
                  "Datastore"
              ],
              "summary": "Create a datastore",
              "operationId": "createDatastore",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Datastore"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "The datastore",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Datastore"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  }
              }
          }
      },
      "/v1/datastore/id": {
          "get": {
              "tags": [
                  "Datastore"
              ],
              "summary": "Get datastore by given id ",
              "operationId": "get_3",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "datastore instance by Id",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Datastore"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "datastore for given instance id is not found"
                  }
              }
          }
      },
      "/v1/datastore/name/{name}": {
          "get": {
              "tags": [
                  "Datastore"
              ],
              "summary": "Get datastore by name",
              "operationId": "getByName_2",
              "parameters": [
                  {
                      "name": "name",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "datastore instance",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Datastore"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "datastore for instance id is not found"
                  }
              }
          }
      },
      "/v1/datastore/types": {
          "get": {
              "tags": [
                  "Datastore"
              ],
              "summary": "List unique list of datastore",
              "operationId": "listTypes",
              "responses": {
                  "200": {
                      "description": "List of datastore instances",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/ResultList"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/v1/datastore/types/{name}": {
          "get": {
              "tags": [
                  "Datastore"
              ],
              "summary": "List of specific datastore",
              "operationId": "listUniqueTypes",
              "parameters": [
                  {
                      "name": "name",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "List of specific  datastore instances",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/ResultList"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/v1/domain": {
          "get": {
              "tags": [
                  "Domain"
              ],
              "summary": "List domains",
              "description": "Get a list of domains",
              "operationId": "list_5",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "schema": {
                          "maximum": 10000,
                          "minimum": 1,
                          "type": "integer",
                          "format": "int32",
                          "default": 100
                      }
                  },
                  {
                      "name": "before",
                      "in": "query",
                      "description": "Returns list of domains before this cursor",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "after",
                      "in": "query",
                      "description": "Returns list of domain after this cursor",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "List of domains",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DomainList"
                              }
                          }
                      }
                  }
              }
          },
          "post": {
              "tags": [
                  "Domain"
              ],
              "summary": "Create a domain",
              "operationId": "createDomain",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Domain"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "The domain",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Domain"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  }
              }
          }
      },
      "/v1/domain/id": {
          "get": {
              "tags": [
                  "Domain"
              ],
              "summary": "Get domain by given id ",
              "operationId": "get_4",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "domain instance by Id",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Domain"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "domain for given instance id is not found"
                  }
              }
          }
      },
      "/": {
          "get": {
              "tags": [
                  "Dummy"
              ],
              "summary": "dummy ops",
              "description": "This is a dummy call",
              "operationId": "getDummy",
              "responses": {
                  "200": {
                      "description": "dummy response",
                      "content": {
                          "application/json": {}
                      }
                  }
              }
          }
      },
      "/v1/extension/config": {
          "get": {
              "tags": [
                  "Extension_Config"
              ],
              "summary": "get all extension config",
              "description": "get all extension config",
              "operationId": "list_6",
              "responses": {
                  "200": {
                      "description": "The user list",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/JsonNode"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/v1/jobError/id": {
          "delete": {
              "tags": [
                  "JobError"
              ],
              "summary": "delete jobError for job",
              "description": "delete jobError ",
              "operationId": "delete_4",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "Id of the job error",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Limit the number dataError returned. (1 to 1000000, default = 10)",
                      "schema": {
                          "maximum": 10,
                          "minimum": 1,
                          "type": "integer",
                          "format": "int32",
                          "default": 1
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The job issue list deleted successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DataErrorList"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/v1/jobError": {
          "get": {
              "tags": [
                  "JobError"
              ],
              "summary": "List jobError",
              "description": "Get a list of jobError. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
              "operationId": "list_7",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Limit the number jobError returned. (1 to 1000000, default = 10)",
                      "schema": {
                          "maximum": 1000000,
                          "minimum": 1,
                          "type": "integer",
                          "format": "int32",
                          "default": 10
                      }
                  },
                  {
                      "name": "before",
                      "in": "query",
                      "description": "Returns list of jobError before this cursor",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "after",
                      "in": "query",
                      "description": "Returns list of jobError after this cursor",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The user list",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/JobErrorList"
                              }
                          }
                      }
                  }
              }
          },
          "delete": {
              "tags": [
                  "JobError"
              ],
              "summary": "delete all data issues for the dataset",
              "description": "delete dataError ",
              "operationId": "deleteAll_1",
              "parameters": [
                  {
                      "name": "datasetId",
                      "in": "query",
                      "description": "Id of the dataset",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Limit the number dataError returned. (1 to 1000000, default = 10)",
                      "schema": {
                          "maximum": 10,
                          "minimum": 1,
                          "type": "integer",
                          "format": "int32",
                          "default": 1
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The issue list deleted successfully",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DataErrorList"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/v1/jobexecution": {
          "get": {
              "tags": [
                  "Job Executions"
              ],
              "summary": "Get last job execution for a given dataset",
              "description": "Get last job execution for a given dataset",
              "operationId": "getByDatasetId",
              "parameters": [
                  {
                      "name": "datasetId",
                      "in": "query",
                      "description": "Dataset Id",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The user",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Job"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "job execution for datasetId id not found"
                  }
              }
          }
      },
      "/v1/jobexecution/list": {
          "get": {
              "tags": [
                  "Job Executions"
              ],
              "summary": "List job execution",
              "description": "Get a list of job execution. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
              "operationId": "list_8",
              "parameters": [
                  {
                      "name": "datasetId",
                      "in": "query",
                      "description": "Filter job execution by database fully qualified name",
                      "schema": {
                          "type": "string",
                          "example": "GCS.orbital-poc-9.delta_db2"
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Limit the number datasets returned. (1 to 1000, default = 10) ",
                      "schema": {
                          "maximum": 1000,
                          "minimum": 1,
                          "type": "integer",
                          "format": "int32",
                          "default": 30
                      }
                  },
                  {
                      "name": "before",
                      "in": "query",
                      "description": "Returns list of datasets before this cursor",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "after",
                      "in": "query",
                      "description": "Returns list of datasets after this cursor",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "List of datasets",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DatasetList"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/v1/jobexecution/list_running": {
          "get": {
              "tags": [
                  "Job Executions"
              ],
              "summary": "List job execution",
              "description": "Get a list of job execution. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
              "operationId": "listRunning",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Limit the number datasets returned. (1 to 1000, default = 10) ",
                      "schema": {
                          "maximum": 1000,
                          "minimum": 1,
                          "type": "integer",
                          "format": "int32",
                          "default": 30
                      }
                  },
                  {
                      "name": "before",
                      "in": "query",
                      "description": "Returns list of datasets before this cursor",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "after",
                      "in": "query",
                      "description": "Returns list of datasets after this cursor",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "List of datasets",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/DatasetList"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/v1/job": {
          "get": {
              "tags": [
                  "Job"
              ],
              "summary": "Get job by datasetId",
              "description": "Get job by datasetId",
              "operationId": "getByDatasetId_1",
              "parameters": [
                  {
                      "name": "datasetId",
                      "in": "query",
                      "description": "Dataset Id",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The user",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Job"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "job for datasetId id not found"
                  }
              }
          },
          "post": {
              "tags": [
                  "Job"
              ],
              "summary": "Create a job",
              "description": "Create a new job.",
              "operationId": "create_2",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Job"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "The job",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Job"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  }
              }
          }
      },
      "/v1/job/status": {
          "put": {
              "tags": [
                  "Job"
              ],
              "summary": "Set job status",
              "description": "Set job status",
              "operationId": "setStatus",
              "parameters": [
                  {
                      "name": "datasetId",
                      "in": "query",
                      "description": "Dataset Id",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "status",
                      "in": "query",
                      "description": "Job status",
                      "schema": {
                          "type": "string",
                          "enum": [
                              "active",
                              "paused"
                          ]
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The user",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Job"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "job for datasetId id not found"
                  }
              }
          }
      },
      "/v1/profileTask/id/status": {
          "put": {
              "tags": [
                  "Data Profile Task"
              ],
              "summary": "delete a profileTask",
              "description": "Profile can be deleted by this API",
              "operationId": "changeStatus",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "status",
                      "in": "query",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "404": {
                      "description": "ProfileTask with ID: id not found"
                  }
              }
          }
      },
      "/v1/profileTask": {
          "get": {
              "tags": [
                  "Data Profile Task"
              ],
              "summary": "List Profile",
              "description": "Get a list of profile.",
              "operationId": "list_9",
              "parameters": [
                  {
                      "name": "datasetId",
                      "in": "query",
                      "description": "Id of the dataset for which all profile are requested",
                      "schema": {
                          "type": "string",
                          "example": "datastore.database.dataset"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The profile list for a dataset",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/ResultList"
                              }
                          }
                      }
                  }
              }
          },
          "post": {
              "tags": [
                  "Data Profile Task"
              ],
              "summary": "Create a new profileTask",
              "description": "Create a new profile.",
              "operationId": "create_3",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ProfileTask"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "The profile creation API",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/ProfileTask"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  }
              }
          }
      },
      "/v1/profileTask/id": {
          "get": {
              "tags": [
                  "Data Profile Task"
              ],
              "summary": "Get a user",
              "description": "Get a user by `id`",
              "operationId": "get_5",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The user",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/ProfileTask"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Profile with Id: id is not found"
                  }
              }
          },
          "put": {
              "tags": [
                  "Data Profile Task"
              ],
              "summary": "update profiler",
              "description": "update profiler",
              "operationId": "updateTask_1",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/ProfileTask"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "404": {
                      "description": "Profiler with ID: id not found"
                  }
              }
          },
          "delete": {
              "tags": [
                  "Data Profile Task"
              ],
              "summary": "delete a profileTask",
              "description": "Profile can be deleted by this API",
              "operationId": "delete_5",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "404": {
                      "description": "Profile with ID: id is not found"
                  }
              }
          }
      },
      "/v1/qualityTask/id/status": {
          "put": {
              "tags": [
                  "Data Quality Task"
              ],
              "summary": "delete a quality",
              "description": "Quality can be deleted by this API",
              "operationId": "changeStatus_1",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "status",
                      "in": "query",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "404": {
                      "description": "Quality with ID: id not found"
                  }
              }
          }
      },
      "/v1/qualityTask": {
          "get": {
              "tags": [
                  "Data Quality Task"
              ],
              "summary": "List Quality",
              "description": "Get a list of quality.",
              "operationId": "list_10",
              "parameters": [
                  {
                      "name": "datasetId",
                      "in": "query",
                      "description": "Id of the dataset for which all quality are requested",
                      "schema": {
                          "type": "string",
                          "example": "datastore.database.dataset"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The quality list for a dataset",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/ResultList"
                              }
                          }
                      }
                  }
              }
          },
          "post": {
              "tags": [
                  "Data Quality Task"
              ],
              "summary": "Create a new quality",
              "description": "Create a new quality.",
              "operationId": "createQuality",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/QualityTask"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "The quality creation API",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/QualityTask"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  }
              }
          }
      },
      "/v1/qualityTask/id": {
          "get": {
              "tags": [
                  "Data Quality Task"
              ],
              "summary": "Get a user",
              "description": "Get a user by `id`",
              "operationId": "get_6",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The user",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/QualityTask"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Quality with Id: id is not found"
                  }
              }
          },
          "put": {
              "tags": [
                  "Data Quality Task"
              ],
              "summary": "update quality task",
              "description": "update quality task",
              "operationId": "updateTask_2",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/QualityTask"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "404": {
                      "description": "Profiler with ID: id not found"
                  }
              }
          },
          "delete": {
              "tags": [
                  "Data Quality Task"
              ],
              "summary": "delete a quality",
              "description": "Quality can be deleted by this API",
              "operationId": "delete_6",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "404": {
                      "description": "Quality with ID: id is not found"
                  }
              }
          }
      },
      "/v1/ruleTask/id/status": {
          "put": {
              "tags": [
                  "Rule Task"
              ],
              "summary": "delete a rule",
              "description": "Rules can be deleted by this API",
              "operationId": "changeStatus_2",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  {
                      "name": "status",
                      "in": "query",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "404": {
                      "description": "Rule with ID: id not found"
                  }
              }
          }
      },
      "/v1/ruleTask": {
          "get": {
              "tags": [
                  "Rule Task"
              ],
              "summary": "List Rules",
              "description": "Get a list of rules.",
              "operationId": "list_11",
              "parameters": [
                  {
                      "name": "datasetId",
                      "in": "query",
                      "description": "Id of the dataset for which all rules are requested",
                      "schema": {
                          "type": "string",
                          "example": "datastore.database.dataset"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The rule list for a dataset",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/ResultList"
                              }
                          }
                      }
                  }
              }
          },
          "post": {
              "tags": [
                  "Rule Task"
              ],
              "summary": "Create a new rule",
              "description": "Create a new rule.",
              "operationId": "createRule",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/RuleTask"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "The rule creation API",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/RuleTask"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  }
              }
          }
      },
      "/v1/ruleTask/id": {
          "get": {
              "tags": [
                  "Rule Task"
              ],
              "summary": "Get a rule",
              "description": "Get a rule by `id`",
              "operationId": "get_7",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The user",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/RuleTask"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Rule with Id: id is not found"
                  }
              }
          },
          "put": {
              "tags": [
                  "Rule Task"
              ],
              "summary": "update rule",
              "description": "update rule",
              "operationId": "updateTask_3",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/RuleTask"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "404": {
                      "description": "Rule with ID: id not found"
                  }
              }
          },
          "delete": {
              "tags": [
                  "Rule Task"
              ],
              "summary": "delete a rule",
              "description": "Rules can be deleted by this API",
              "operationId": "delete_7",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "404": {
                      "description": "Rule with ID: id is not found"
                  }
              }
          }
      },
      "/v1/ruleTask/nextId": {
          "get": {
              "tags": [
                  "Rule Task"
              ],
              "summary": "Get next rule Id",
              "description": "Get next rule Id",
              "operationId": "getNextId",
              "responses": {
                  "200": {
                      "description": "The user",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/RuleTask"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Rule with Id: id is not found"
                  }
              }
          }
      },
      "/v1/search/autocomplete": {
          "get": {
              "tags": [
                  "Catalog Search"
              ],
              "summary": "List datasetIds for autoComplete",
              "description": "Get a list of datasetIds for a given string.",
              "operationId": "autoCompleteSearch",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "schema": {
                          "maximum": 100,
                          "minimum": 1,
                          "type": "integer",
                          "format": "int32",
                          "default": 10
                      }
                  },
                  {
                      "name": "starting_with",
                      "in": "query",
                      "description": "to get dataset id list starting with given string",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "contains",
                      "in": "query",
                      "description": "to get dataset id list containing given string",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "ending_with",
                      "in": "query",
                      "description": "to get dataset id list ending with given string",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The dataset Id list for search cache",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/ResultList"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/v1/search/onboard/gcp_bigquery": {
          "post": {
              "tags": [
                  "Catalog Search"
              ],
              "summary": "Get a dataset by name",
              "description": "Get a dataset by fully qualified dataset name.",
              "operationId": "onboardGoogleBigQueryDatasets",
              "requestBody": {
                  "description": "dataset info json",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "dataset",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Dataset"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Dataset for instance id is not found"
                  }
              }
          }
      },
      "/v1/search/onboard/kaggle": {
          "post": {
              "tags": [
                  "Catalog Search"
              ],
              "summary": "Get a dataset by name",
              "description": "Get a dataset by fully qualified dataset name.",
              "operationId": "onboardKaggleDatasets",
              "requestBody": {
                  "description": "dataset info json",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "dataset",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Dataset"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Dataset for instance id is not found"
                  }
              }
          }
      },
      "/v1/search/gcp_bigquery": {
          "get": {
              "tags": [
                  "Catalog Search"
              ],
              "summary": "Get a dataset by name",
              "description": "Get a dataset by fully qualified dataset name.",
              "operationId": "searchGCPBigqueryDatasets",
              "parameters": [
                  {
                      "name": "databaseId",
                      "in": "query",
                      "description": "database search term",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "datasetId",
                      "in": "query",
                      "description": "dataset search term",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "datastoreId",
                      "in": "query",
                      "description": "datastore search term",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "ownerId",
                      "in": "query",
                      "description": "dataset owner id",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "tags",
                      "in": "query",
                      "description": "tags for the dataset",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "source",
                      "in": "query",
                      "description": "source of dataset",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sourceURL",
                      "in": "query",
                      "description": "dataset search term",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "schema": {
                          "maximum": 100,
                          "minimum": 1,
                          "type": "integer",
                          "format": "int32",
                          "default": 10
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "dataset",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Dataset"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Dataset for instance id is not found"
                  }
              }
          }
      },
      "/v1/search/kaggle": {
          "get": {
              "tags": [
                  "Catalog Search"
              ],
              "summary": "Get a dataset by name",
              "description": "Get a dataset by fully qualified dataset name.",
              "operationId": "searchKaggleDatasets",
              "parameters": [
                  {
                      "name": "databaseId",
                      "in": "query",
                      "description": "dataset search term",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "ownerId",
                      "in": "query",
                      "description": "dataset search term",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "tags",
                      "in": "query",
                      "description": "dataset search term",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "sourceURL",
                      "in": "query",
                      "description": "dataset search term",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "schema": {
                          "maximum": 100,
                          "minimum": 1,
                          "type": "integer",
                          "format": "int32",
                          "default": 10
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "dataset",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Dataset"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Dataset for instance id is not found"
                  }
              }
          }
      },
      "/v1/search/oculus/dataset": {
          "post": {
              "tags": [
                  "Catalog Search"
              ],
              "summary": "Get a dataset Id for given parameters",
              "description": "Get a dataset Id for given parameters.",
              "operationId": "searchOculusDatasets",
              "requestBody": {
                  "description": "dataset info json",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          }
                      }
                  },
                  "required": true
              },
              "responses": {
                  "200": {
                      "description": "dataset",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Dataset"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "Dataset for instance id is not found"
                  }
              }
          }
      },
      "/v1/secret/id": {
          "post": {
              "tags": [
                  "Secret collection"
              ],
              "summary": "Create a secret",
              "description": "Create a new secret.",
              "operationId": "create_4",
              "parameters": [
                  {
                      "name": "secretkey",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "string"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "The secret",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  }
              }
          }
      },
      "/v1/secret": {
          "get": {
              "tags": [
                  "Secret collection"
              ],
              "summary": "Get secret by datasetId",
              "description": "Get secret by datasetId",
              "operationId": "getByKey",
              "parameters": [
                  {
                      "name": "secretkey",
                      "in": "query",
                      "description": "secret key",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The user",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "secret for datasetId id not found"
                  }
              }
          }
      },
      "/v1/user/feedback": {
          "post": {
              "tags": [
                  "User"
              ],
              "summary": "Create a user activity",
              "description": "Create a new user.",
              "operationId": "addFeedback",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Feedback"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "The user creation API",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/User"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  }
              }
          }
      },
      "/v1/user": {
          "get": {
              "tags": [
                  "User"
              ],
              "summary": "List users",
              "description": "Get a list of users. Use `fields` parameter to get only necessary fields. Use cursor-based pagination to limit the number entries in the list using `limit` and `before` or `after` query params.",
              "operationId": "list_12",
              "parameters": [
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "Limit the number users returned. (1 to 1000000, default = 10)",
                      "schema": {
                          "maximum": 1000,
                          "minimum": 1,
                          "type": "integer",
                          "format": "int32",
                          "default": 10
                      }
                  },
                  {
                      "name": "before",
                      "in": "query",
                      "description": "Returns list of users before this cursor",
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "after",
                      "in": "query",
                      "description": "Returns list of users after this cursor",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The user list",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/UserList"
                              }
                          }
                      }
                  }
              }
          },
          "post": {
              "tags": [
                  "User"
              ],
              "summary": "Create a new user",
              "description": "Create a new user.",
              "operationId": "createUser",
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/User"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "The user creation API",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/User"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  }
              }
          }
      },
      "/v1/user/visited": {
          "post": {
              "tags": [
                  "User"
              ],
              "summary": "Create a user activity",
              "description": "Create a new user.",
              "operationId": "createUserActivity",
              "parameters": [
                  {
                      "name": "visitedURL",
                      "in": "query",
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/User"
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "The user creation API",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/User"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad request"
                  }
              }
          }
      },
      "/v1/user/id": {
          "get": {
              "tags": [
                  "User"
              ],
              "summary": "Get a user",
              "description": "Get a user by `id`",
              "operationId": "get_8",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The user",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/User"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "User for instance id is not found"
                  }
              }
          },
          "delete": {
              "tags": [
                  "User"
              ],
              "summary": "Deactivate a user",
              "description": "Users can't be deleted but are deactivated. The name and display name is prefixed with the string `deactivated`.",
              "operationId": "delete_8",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK"
                  },
                  "404": {
                      "description": "User for instance id is not found"
                  }
              }
          }
      },
      "/v1/user/name/{name}": {
          "get": {
              "tags": [
                  "User"
              ],
              "summary": "Get a user by name",
              "description": "Get a user by `name`.",
              "operationId": "getByName_3",
              "parameters": [
                  {
                      "name": "name",
                      "in": "path",
                      "required": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "The user",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/User"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "User for instance id is not found"
                  }
              }
          }
      },
      "/v1/user/loggedInUser": {
          "get": {
              "tags": [
                  "User"
              ],
              "summary": "Get current logged in user",
              "description": "Get the user who is authenticated and is currently logged in.",
              "operationId": "getCurrentLoggedInUser",
              "responses": {
                  "200": {
                      "description": "The user",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/User"
                              }
                          }
                      }
                  },
                  "404": {
                      "description": "User not found"
                  }
              }
          }
      },
      "/v1/status": {
          "get": {
              "tags": [
                  "healthcheck"
              ],
              "summary": "get all extension config",
              "description": "get all extension config",
              "operationId": "getHealthStatus",
              "responses": {
                  "200": {
                      "description": "The user list",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/JsonNode"
                              }
                          }
                      }
                  }
              }
          }
      },
      "/v1/config/auth": {
          "get": {
              "tags": [
                  "Get configuration"
              ],
              "summary": "Get auth configuration",
              "operationId": "getAuthConfig",
              "responses": {
                  "200": {
                      "description": "Auth configuration",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/AuthenticationConfig"
                              }
                          }
                      }
                  }
              }
          }
      }
  },
  "components": {
      "schemas": {
          "User": {
              "required": [
                  "id"
              ],
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string"
                  },
                  "name": {
                      "type": "string"
                  },
                  "email": {
                      "type": "string"
                  },
                  "type": {
                      "type": "string",
                      "enum": [
                          "app",
                          "user",
                          "team",
                          "report"
                      ]
                  },
                  "role": {
                      "type": "string",
                      "enum": [
                          "admin",
                          "user",
                          "observer",
                          "service"
                      ]
                  },
                  "json": {
                      "type": "string"
                  },
                  "version": {
                      "type": "string"
                  },
                  "active": {
                      "type": "boolean"
                  },
                  "assetCreatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "assetUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "createdTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "updatedTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "createdBy": {
                      "type": "string"
                  },
                  "updatedBy": {
                      "type": "string"
                  },
                  "owner": {
                      "type": "string"
                  }
              }
          },
          "JsonNode": {
              "type": "object"
          },
          "CatalogConfig": {
              "type": "object",
              "properties": {
                  "GoogleCatalogConfig": {
                      "$ref": "#/components/schemas/GoogleCatalogConfig"
                  },
                  "KaggleCatalogConfig": {
                      "$ref": "#/components/schemas/KaggleCatalogConfig"
                  },
                  "UnityCatalogConfig": {
                      "$ref": "#/components/schemas/UnityCatalogConfig"
                  }
              }
          },
          "DOPAccount": {
              "required": [
                  "id"
              ],
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string"
                  },
                  "name": {
                      "type": "string"
                  },
                  "email": {
                      "type": "string"
                  },
                  "cloudProvider": {
                      "type": "string",
                      "enum": [
                          "gcp",
                          "aws",
                          "azure",
                          "digital_ocean"
                      ]
                  },
                  "catalogConfig": {
                      "$ref": "#/components/schemas/CatalogConfig"
                  },
                  "dataProcessorConfig": {
                      "$ref": "#/components/schemas/DataProcessorConfig"
                  },
                  "streamingInterval": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "json": {
                      "type": "string"
                  },
                  "version": {
                      "type": "string"
                  },
                  "active": {
                      "type": "boolean"
                  },
                  "assetCreatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "assetUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "createdTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "updatedTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "createdBy": {
                      "type": "string"
                  },
                  "updatedBy": {
                      "type": "string"
                  },
                  "owner": {
                      "type": "string"
                  }
              }
          },
          "DataProcessorConfig": {
              "type": "object",
              "properties": {
                  "name": {
                      "type": "string"
                  },
                  "schedule": {
                      "$ref": "#/components/schemas/Schedule"
                  },
                  "cloudProvider": {
                      "type": "string",
                      "enum": [
                          "gcp",
                          "aws",
                          "azure",
                          "digital_ocean"
                      ]
                  },
                  "sparkConf": {
                      "type": "object",
                      "additionalProperties": {
                          "type": "string"
                      }
                  },
                  "json": {
                      "type": "string"
                  },
                  "version": {
                      "type": "string"
                  },
                  "active": {
                      "type": "boolean"
                  },
                  "assetCreatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "assetUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "createdTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "updatedTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "createdBy": {
                      "type": "string"
                  },
                  "updatedBy": {
                      "type": "string"
                  },
                  "owner": {
                      "type": "string"
                  }
              }
          },
          "GoogleCatalogConfig": {
              "required": [
                  "id"
              ],
              "type": "object",
              "properties": {
                  "projects": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "projectLocation": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "parentProjectSAKey": {
                      "type": "string"
                  },
                  "id": {
                      "type": "string"
                  },
                  "name": {
                      "type": "string"
                  },
                  "catalogProvider": {
                      "type": "array",
                      "items": {
                          "type": "string",
                          "enum": [
                              "Google_Data_Catalog",
                              "Azure_Data_Catalog",
                              "AWS_Data_Catalog",
                              "DataHub",
                              "Open_Metadata",
                              "Kaggle_Data_Catalog",
                              "Unity_Data_Catalog"
                          ]
                      }
                  },
                  "catalogSyncSchedule": {
                      "$ref": "#/components/schemas/Schedule"
                  },
                  "catalogSyncStatus": {
                      "type": "string",
                      "enum": [
                          "active",
                          "paused"
                      ]
                  }
              }
          },
          "KaggleCatalogConfig": {
              "required": [
                  "id"
              ],
              "type": "object",
              "properties": {
                  "cookie": {
                      "type": "string"
                  },
                  "x-xsrf-token": {
                      "type": "string"
                  },
                  "accessToken": {
                      "type": "string"
                  },
                  "id": {
                      "type": "string"
                  },
                  "name": {
                      "type": "string"
                  },
                  "catalogProvider": {
                      "type": "array",
                      "items": {
                          "type": "string",
                          "enum": [
                              "Google_Data_Catalog",
                              "Azure_Data_Catalog",
                              "AWS_Data_Catalog",
                              "DataHub",
                              "Open_Metadata",
                              "Kaggle_Data_Catalog",
                              "Unity_Data_Catalog"
                          ]
                      }
                  },
                  "catalogSyncSchedule": {
                      "$ref": "#/components/schemas/Schedule"
                  },
                  "catalogSyncStatus": {
                      "type": "string",
                      "enum": [
                          "active",
                          "paused"
                      ]
                  }
              }
          },
          "Schedule": {
              "type": "object",
              "properties": {
                  "scheduleType": {
                      "type": "string",
                      "enum": [
                          "cron",
                          "one_time",
                          "no_schedule"
                      ]
                  },
                  "scheduledOnceAlready": {
                      "type": "boolean"
                  },
                  "startTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "repeatFrequency": {
                      "type": "string"
                  },
                  "cronExpression": {
                      "type": "string"
                  }
              }
          },
          "UnityCatalogConfig": {
              "required": [
                  "id"
              ],
              "type": "object",
              "properties": {
                  "instanceURL": {
                      "type": "string"
                  },
                  "catalogURL": {
                      "type": "string"
                  },
                  "personalAccessToken": {
                      "type": "string"
                  },
                  "id": {
                      "type": "string"
                  },
                  "name": {
                      "type": "string"
                  },
                  "catalogProvider": {
                      "type": "array",
                      "items": {
                          "type": "string",
                          "enum": [
                              "Google_Data_Catalog",
                              "Azure_Data_Catalog",
                              "AWS_Data_Catalog",
                              "DataHub",
                              "Open_Metadata",
                              "Kaggle_Data_Catalog",
                              "Unity_Data_Catalog"
                          ]
                      }
                  },
                  "catalogSyncSchedule": {
                      "$ref": "#/components/schemas/Schedule"
                  },
                  "catalogSyncStatus": {
                      "type": "string",
                      "enum": [
                          "active",
                          "paused"
                      ]
                  }
              }
          },
          "ObjectNode": {
              "type": "object"
          },
          "DataContract": {
              "type": "object",
              "properties": {
                  "specVersion": {
                      "type": "string"
                  },
                  "usageInfo": {
                      "type": "string"
                  },
                  "catalogURL": {
                      "type": "string"
                  },
                  "termsAndConditions": {
                      "$ref": "#/components/schemas/TermsAndConditions"
                  },
                  "stakeholders": {
                      "$ref": "#/components/schemas/Stakeholders"
                  },
                  "notifications": {
                      "$ref": "#/components/schemas/Notifications"
                  },
                  "sampleValues": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "json": {
                      "type": "string"
                  },
                  "version": {
                      "type": "string"
                  },
                  "active": {
                      "type": "boolean"
                  },
                  "assetCreatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "assetUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "createdTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "updatedTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "createdBy": {
                      "type": "string"
                  },
                  "updatedBy": {
                      "type": "string"
                  },
                  "owner": {
                      "type": "string"
                  },
                  "id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "type": "string"
                  },
                  "description": {
                      "type": "string"
                  },
                  "datasetId": {
                      "type": "string"
                  },
                  "columns": {
                      "type": "string"
                  },
                  "successMsg": {
                      "type": "string"
                  },
                  "failureMsg": {
                      "type": "string"
                  },
                  "onboardingStatus": {
                      "type": "string",
                      "enum": [
                          "drafted",
                          "deployed",
                          "paused",
                          "under_review",
                          "approved"
                      ]
                  },
                  "executionStatus": {
                      "type": "string",
                      "enum": [
                          "passing",
                          "failing",
                          "pending"
                      ]
                  },
                  "criticalityLevel": {
                      "type": "string",
                      "enum": [
                          "high",
                          "moderate",
                          "less",
                          "not"
                      ]
                  }
              }
          },
          "Notifications": {
              "type": "object",
              "properties": {
                  "emails": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "slack_channels": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "webhook_urls": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  }
              }
          },
          "Stakeholders": {
              "type": "object",
              "properties": {
                  "producers": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "consumers": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "operators": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "admins": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  }
              }
          },
          "TermsAndConditions": {
              "type": "object",
              "properties": {
                  "dataSchemaContract": {
                      "type": "array",
                      "items": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  "dataValidationContract": {
                      "type": "array",
                      "items": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  "dataMetricsContract": {
                      "type": "array",
                      "items": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  "dataQualityContract": {
                      "type": "array",
                      "items": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  "governancePoliciesContract": {
                      "type": "array",
                      "items": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              }
          },
          "ContractStatus": {
              "type": "object",
              "properties": {
                  "status": {
                      "type": "string",
                      "enum": [
                          "passing",
                          "failing",
                          "pending"
                      ]
                  },
                  "passingCount": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "passingIds": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  "failingCount": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "failingIds": {
                      "uniqueItems": true,
                      "type": "array",
                      "items": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              }
          },
          "DataContractStatus": {
              "required": [
                  "id",
                  "overallStatus"
              ],
              "type": "object",
              "properties": {
                  "id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "datasetId": {
                      "type": "string"
                  },
                  "overallStatus": {
                      "$ref": "#/components/schemas/ContractStatus"
                  },
                  "lowWatermark": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "highWatermark": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "termsAndConditionsStatus": {
                      "$ref": "#/components/schemas/TermsAndConditionsStatus"
                  },
                  "json": {
                      "type": "string"
                  },
                  "version": {
                      "type": "string"
                  },
                  "active": {
                      "type": "boolean"
                  },
                  "assetCreatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "assetUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "createdTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "updatedTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "createdBy": {
                      "type": "string"
                  },
                  "updatedBy": {
                      "type": "string"
                  },
                  "owner": {
                      "type": "string"
                  }
              }
          },
          "Paging": {
              "required": [
                  "total"
              ],
              "type": "object",
              "properties": {
                  "before": {
                      "type": "string"
                  },
                  "after": {
                      "type": "string"
                  },
                  "total": {
                      "type": "integer",
                      "format": "int32"
                  }
              }
          },
          "ResultListDataContractStatus": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/DataContractStatus"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "TermsAndConditionsStatus": {
              "type": "object",
              "properties": {
                  "dataSchemaContractStatus": {
                      "$ref": "#/components/schemas/ContractStatus"
                  },
                  "dataValidationContractStatus": {
                      "$ref": "#/components/schemas/ContractStatus"
                  },
                  "dataMetricsContractStatus": {
                      "$ref": "#/components/schemas/ContractStatus"
                  },
                  "dataQualityContractStatus": {
                      "$ref": "#/components/schemas/ContractStatus"
                  },
                  "governancePoliciesContractStatus": {
                      "$ref": "#/components/schemas/ContractStatus"
                  }
              }
          },
          "ResultList": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "type": "object"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "ResultListDataContract": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/DataContract"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "DataErrorList": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/DataIssue"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "DataIssue": {
              "required": [
                  "description"
              ],
              "type": "object",
              "properties": {
                  "type": {
                      "type": "string"
                  },
                  "topValues": {
                      "type": "object",
                      "additionalProperties": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  "json": {
                      "type": "string"
                  },
                  "version": {
                      "type": "string"
                  },
                  "active": {
                      "type": "boolean"
                  },
                  "assetCreatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "assetUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "createdTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "updatedTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "createdBy": {
                      "type": "string"
                  },
                  "updatedBy": {
                      "type": "string"
                  },
                  "owner": {
                      "type": "string"
                  },
                  "id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "datasetId": {
                      "type": "string"
                  },
                  "colName": {
                      "type": "string"
                  },
                  "colNames": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "lowWatermark": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "highWatermark": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "eventTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "errorCode": {
                      "type": "string"
                  },
                  "level": {
                      "type": "string",
                      "enum": [
                          "critical",
                          "warning",
                          "info"
                      ]
                  },
                  "actionTaken": {
                      "type": "string",
                      "enum": [
                          "Fixed",
                          "Expected",
                          "Ack_N_Review",
                          "Ignore"
                      ]
                  },
                  "jobId": {
                      "type": "string"
                  },
                  "threadId": {
                      "type": "string"
                  },
                  "jobExecutionId": {
                      "type": "string"
                  },
                  "description": {
                      "type": "string"
                  },
                  "frequency": {
                      "type": "number",
                      "format": "double"
                  }
              }
          },
          "ResultListDataIssue": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/DataIssue"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "Database": {
              "required": [
                  "datastoreId",
                  "id",
                  "name"
              ],
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string"
                  },
                  "name": {
                      "type": "string"
                  },
                  "displayName": {
                      "type": "string"
                  },
                  "datastoreId": {
                      "type": "string"
                  },
                  "description": {
                      "type": "string"
                  },
                  "location": {
                      "type": "string"
                  },
                  "config": {
                      "type": "object",
                      "additionalProperties": {
                          "type": "string"
                      }
                  },
                  "json": {
                      "type": "string"
                  },
                  "version": {
                      "type": "string"
                  },
                  "active": {
                      "type": "boolean"
                  },
                  "assetCreatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "assetUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "createdTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "updatedTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "createdBy": {
                      "type": "string"
                  },
                  "updatedBy": {
                      "type": "string"
                  },
                  "owner": {
                      "type": "string"
                  }
              }
          },
          "ResultListMapStringObject": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "type": "object",
                          "additionalProperties": {
                              "type": "object"
                          }
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "DatabaseList": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/Database"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "ResultListDatabase": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/Database"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "Job": {
              "required": [
                  "datasetId"
              ],
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string"
                  },
                  "name": {
                      "type": "string"
                  },
                  "description": {
                      "type": "string"
                  },
                  "datasetId": {
                      "type": "string"
                  },
                  "executionMode": {
                      "type": "string",
                      "enum": [
                          "batch",
                          "streaming"
                      ]
                  },
                  "schedule": {
                      "$ref": "#/components/schemas/Schedule"
                  },
                  "status": {
                      "type": "string",
                      "enum": [
                          "active",
                          "paused"
                      ]
                  },
                  "priority": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "config": {
                      "type": "object",
                      "additionalProperties": {
                          "type": "string"
                      }
                  },
                  "json": {
                      "type": "string"
                  },
                  "version": {
                      "type": "string"
                  },
                  "active": {
                      "type": "boolean"
                  },
                  "assetCreatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "assetUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "createdTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "updatedTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "createdBy": {
                      "type": "string"
                  },
                  "updatedBy": {
                      "type": "string"
                  },
                  "owner": {
                      "type": "string"
                  }
              }
          },
          "Column": {
              "required": [
                  "dataType",
                  "name"
              ],
              "type": "object",
              "properties": {
                  "name": {
                      "type": "string"
                  },
                  "displayName": {
                      "type": "string"
                  },
                  "dataType": {
                      "type": "string"
                  },
                  "dataFormat": {
                      "type": "string"
                  },
                  "dataLength": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "nullable": {
                      "type": "boolean"
                  },
                  "primaryKey": {
                      "type": "boolean"
                  },
                  "unique": {
                      "type": "boolean"
                  },
                  "partition_key": {
                      "type": "boolean"
                  },
                  "index": {
                      "type": "boolean"
                  },
                  "foreignKey": {
                      "$ref": "#/components/schemas/ForeignKey"
                  },
                  "defaultValue": {
                      "type": "string"
                  },
                  "isDefaultValueSet": {
                      "type": "boolean"
                  },
                  "precision": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "scale": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "unsigned": {
                      "type": "boolean"
                  },
                  "dataTypeCategory": {
                      "type": "string"
                  },
                  "dataTypeDisplayName": {
                      "type": "string"
                  },
                  "tagMap": {
                      "type": "object",
                      "additionalProperties": {
                          "type": "string"
                      }
                  },
                  "ordinalPosition": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "description": {
                      "type": "string"
                  },
                  "subColumns": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/Column"
                      }
                  },
                  "json": {
                      "type": "string"
                  },
                  "version": {
                      "type": "string"
                  },
                  "active": {
                      "type": "boolean"
                  },
                  "assetCreatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "assetUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "createdTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "updatedTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "createdBy": {
                      "type": "string"
                  },
                  "updatedBy": {
                      "type": "string"
                  },
                  "owner": {
                      "type": "string"
                  }
              }
          },
          "Dataset": {
              "required": [
                  "columns",
                  "id",
                  "name"
              ],
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string"
                  },
                  "name": {
                      "type": "string"
                  },
                  "displayName": {
                      "type": "string"
                  },
                  "datasetType": {
                      "type": "string",
                      "enum": [
                          "TABLE",
                          "EXTERNAL_TABLE",
                          "VIEW",
                          "SECURE_VIEW",
                          "MATERIALIZED_VIEW",
                          "MODEL",
                          "SNAPSHOT",
                          "ICEBERG",
                          "DELTA",
                          "DELTA_LIVE",
                          "FILE",
                          "API",
                          "STREAMING_EVENTS"
                      ]
                  },
                  "format": {
                      "type": "string",
                      "enum": [
                          "csv",
                          "xlsx",
                          "json",
                          "jsonl",
                          "seq",
                          "avro",
                          "parquet",
                          "orc",
                          "delta_parquet",
                          "unknown"
                      ]
                  },
                  "compressionType": {
                      "type": "string",
                      "enum": [
                          "zip",
                          "gz",
                          "snappy",
                          "lz4",
                          "bz2",
                          "deflate",
                          "zlib",
                          "tar.gz"
                      ]
                  },
                  "location": {
                      "type": "string"
                  },
                  "dataPaths": {
                      "type": "string"
                  },
                  "rawSchema": {
                      "$ref": "#/components/schemas/RawSchema"
                  },
                  "columns": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/Column"
                      }
                  },
                  "datasetPartition": {
                      "$ref": "#/components/schemas/DatasetPartition"
                  },
                  "watermarkColumns": {
                      "type": "string"
                  },
                  "watermarkType": {
                      "type": "string",
                      "enum": [
                          "DATETIME",
                          "NUMBER",
                          "VERSIONED_DATA"
                      ]
                  },
                  "watermarkInitialValue": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "config": {
                      "type": "object",
                      "additionalProperties": {
                          "type": "string"
                      }
                  },
                  "properties": {
                      "type": "object",
                      "additionalProperties": {
                          "type": "string"
                      }
                  },
                  "datasetConstraints": {
                      "$ref": "#/components/schemas/DatasetConstraint"
                  },
                  "description": {
                      "type": "string"
                  },
                  "status": {
                      "type": "string"
                  },
                  "databaseId": {
                      "type": "string"
                  },
                  "datastoreId": {
                      "type": "string"
                  },
                  "qualityScoreConfig": {
                      "$ref": "#/components/schemas/QualityScoreConfig"
                  },
                  "json": {
                      "type": "string"
                  },
                  "version": {
                      "type": "string"
                  },
                  "active": {
                      "type": "boolean"
                  },
                  "assetCreatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "assetUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "createdTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "updatedTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "createdBy": {
                      "type": "string"
                  },
                  "updatedBy": {
                      "type": "string"
                  },
                  "owner": {
                      "type": "string"
                  }
              }
          },
          "DatasetConstraint": {
              "type": "object",
              "properties": {
                  "nullable": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "primaryKey": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "unique": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "partitionKey": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "index": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  }
              }
          },
          "DatasetList": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/Dataset"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "DatasetPartition": {
              "required": [
                  "columns",
                  "interval",
                  "intervalType"
              ],
              "type": "object",
              "properties": {
                  "columns": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "intervalType": {
                      "type": "string",
                      "enum": [
                          "TIME-UNIT",
                          "INTEGER-RANGE",
                          "INTGESTION-TIME",
                          "COLUMN-VALUE"
                      ]
                  },
                  "interval": {
                      "type": "string"
                  }
              }
          },
          "ForeignKey": {
              "required": [
                  "reference_column",
                  "reference_table"
              ],
              "type": "object",
              "properties": {
                  "reference_table": {
                      "type": "string"
                  },
                  "reference_column": {
                      "type": "string"
                  }
              }
          },
          "QualityScoreConfig": {
              "type": "object",
              "properties": {
                  "quality_contribution": {
                      "type": "object",
                      "additionalProperties": {
                          "type": "integer",
                          "format": "int32"
                      }
                  },
                  "rules_contribution": {
                      "type": "object",
                      "additionalProperties": {
                          "type": "integer",
                          "format": "int32"
                      }
                  }
              }
          },
          "RawSchema": {
              "required": [
                  "id",
                  "name",
                  "type"
              ],
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string"
                  },
                  "url": {
                      "type": "string"
                  },
                  "name": {
                      "type": "string"
                  },
                  "type": {
                      "type": "string"
                  },
                  "schemaString": {
                      "type": "string"
                  },
                  "json": {
                      "type": "string"
                  },
                  "version": {
                      "type": "string"
                  },
                  "active": {
                      "type": "boolean"
                  },
                  "assetCreatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "assetUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "createdTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "updatedTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "createdBy": {
                      "type": "string"
                  },
                  "updatedBy": {
                      "type": "string"
                  },
                  "owner": {
                      "type": "string"
                  }
              }
          },
          "ResultListString": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "SnapshotMetric": {
              "required": [
                  "value",
                  "valueType"
              ],
              "type": "object",
              "properties": {
                  "className": {
                      "type": "string"
                  },
                  "value": {
                      "type": "object"
                  },
                  "version": {
                      "type": "string"
                  },
                  "valueType": {
                      "type": "string",
                      "enum": [
                          "base64_binary",
                          "base64_deflate",
                          "string"
                      ]
                  }
              }
          },
          "DataMetricAgg": {
              "required": [
                  "colName",
                  "datasetId"
              ],
              "type": "object",
              "properties": {
                  "datasetId": {
                      "type": "string"
                  },
                  "colName": {
                      "type": "string"
                  },
                  "lowWatermark": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "highWatermark": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "json": {
                      "type": "string"
                  },
                  "version": {
                      "type": "string"
                  },
                  "active": {
                      "type": "boolean"
                  },
                  "assetCreatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "assetUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "createdTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "updatedTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "createdBy": {
                      "type": "string"
                  },
                  "updatedBy": {
                      "type": "string"
                  },
                  "owner": {
                      "type": "string"
                  }
              }
          },
          "DataMetricAggList": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/DataMetricAgg"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "ResultListDataMetricAgg": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/DataMetricAgg"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "DataMetric": {
              "required": [
                  "colName",
                  "datasetId"
              ],
              "type": "object",
              "properties": {
                  "datasetId": {
                      "type": "string"
                  },
                  "lowWatermark": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "highWatermark": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "colName": {
                      "type": "string"
                  },
                  "dataTypeInfo": {
                      "$ref": "#/components/schemas/DataTypeInfo"
                  },
                  "json": {
                      "type": "string"
                  },
                  "version": {
                      "type": "string"
                  },
                  "active": {
                      "type": "boolean"
                  },
                  "assetCreatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "assetUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "createdTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "updatedTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "createdBy": {
                      "type": "string"
                  },
                  "updatedBy": {
                      "type": "string"
                  },
                  "owner": {
                      "type": "string"
                  }
              }
          },
          "DataMetricList": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/DataMetric"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "DataTypeInfo": {
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string"
                  },
                  "sourceType": {
                      "type": "string"
                  },
                  "javaType": {
                      "type": "string",
                      "enum": [
                          "BOOLEAN",
                          "BYTE_ARRAY",
                          "BYTE",
                          "SHORT",
                          "INT",
                          "BIGINTEGER",
                          "LONG",
                          "FLOAT",
                          "DOUBLE",
                          "DECIMAL",
                          "DECIMAL_PS",
                          "CHAR",
                          "STRING",
                          "DATE",
                          "LOCALDATETIME",
                          "TIME",
                          "DATETIME",
                          "TIMESTAMP",
                          "LIST",
                          "JSON",
                          "OBJECT"
                      ]
                  },
                  "isUnsigned": {
                      "type": "boolean"
                  },
                  "length": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "storageBytes": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "typicalDefaultValue": {
                      "type": "object"
                  },
                  "description": {
                      "type": "string"
                  }
              }
          },
          "ResultListDataMetric": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/DataMetric"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "ResultListWatermark": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/Watermark"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "Watermark": {
              "required": [
                  "datasetId"
              ],
              "type": "object",
              "properties": {
                  "datasetId": {
                      "type": "string"
                  },
                  "watermarkColumns": {
                      "type": "string"
                  },
                  "watermarkType": {
                      "type": "string",
                      "enum": [
                          "DATETIME",
                          "NUMBER",
                          "VERSIONED_DATA"
                      ]
                  },
                  "lowWatermark": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "highWatermark": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "partitionOffsetMap": {
                      "type": "object",
                      "additionalProperties": {
                          "type": "object"
                      }
                  },
                  "totalRecordCount": {
                      "type": "number",
                      "format": "double"
                  },
                  "newRecordCountToBeProcessed": {
                      "type": "number",
                      "format": "double"
                  },
                  "processedRecordCount": {
                      "type": "number",
                      "format": "double"
                  },
                  "processedStatus": {
                      "type": "string",
                      "enum": [
                          "DRAFT",
                          "NEW",
                          "FAILED",
                          "PROCESSING",
                          "COMPLETED",
                          "EMPTY"
                      ]
                  },
                  "json": {
                      "type": "string"
                  },
                  "version": {
                      "type": "string"
                  },
                  "active": {
                      "type": "boolean"
                  },
                  "assetCreatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "assetUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "createdTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "updatedTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "createdBy": {
                      "type": "string"
                  },
                  "updatedBy": {
                      "type": "string"
                  },
                  "owner": {
                      "type": "string"
                  }
              }
          },
          "JobError": {
              "required": [
                  "description"
              ],
              "type": "object",
              "properties": {
                  "type": {
                      "type": "string",
                      "enum": [
                          "platformError",
                          "jobError",
                          "unknownError"
                      ]
                  },
                  "json": {
                      "type": "string"
                  },
                  "version": {
                      "type": "string"
                  },
                  "active": {
                      "type": "boolean"
                  },
                  "assetCreatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "assetUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "createdTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "updatedTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "createdBy": {
                      "type": "string"
                  },
                  "updatedBy": {
                      "type": "string"
                  },
                  "owner": {
                      "type": "string"
                  },
                  "id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "datasetId": {
                      "type": "string"
                  },
                  "colName": {
                      "type": "string"
                  },
                  "colNames": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "lowWatermark": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "highWatermark": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "eventTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "errorCode": {
                      "type": "string"
                  },
                  "level": {
                      "type": "string",
                      "enum": [
                          "critical",
                          "warning",
                          "info"
                      ]
                  },
                  "actionTaken": {
                      "type": "string",
                      "enum": [
                          "Fixed",
                          "Expected",
                          "Ack_N_Review",
                          "Ignore"
                      ]
                  },
                  "jobId": {
                      "type": "string"
                  },
                  "threadId": {
                      "type": "string"
                  },
                  "jobExecutionId": {
                      "type": "string"
                  },
                  "description": {
                      "type": "string"
                  },
                  "frequency": {
                      "type": "number",
                      "format": "double"
                  }
              }
          },
          "ResultListJobError": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/JobError"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "ResultListDataset": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/Dataset"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "ConnectionArguments": {
              "type": "object"
          },
          "ConnectionOptions": {
              "type": "object"
          },
          "Datastore": {
              "required": [
                  "name",
                  "type"
              ],
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string"
                  },
                  "name": {
                      "type": "string"
                  },
                  "description": {
                      "type": "string"
                  },
                  "type": {
                      "type": "string",
                      "enum": [
                          "MySQL",
                          "DB2",
                          "SQLServer",
                          "MariaDB",
                          "MsSQL",
                          "Oracle",
                          "PostgreSQL",
                          "hsqldb",
                          "GOOGLE_SQL",
                          "Google Spanner",
                          "AWS_RDS",
                          "S3",
                          "GCS",
                          "ABFS",
                          "HDFS",
                          "DeltaLake",
                          "DeltaSharing",
                          "IceBerg",
                          "File",
                          "BigQuery",
                          "Snowflake",
                          "AWS Redshift",
                          "Cassandra",
                          "Couchbase",
                          "Druid",
                          "Hive",
                          "Presto",
                          "Trino",
                          "HBase",
                          "Unity",
                          "BigTable",
                          "MongoDB",
                          "Aerospike",
                          "ElasticSearch",
                          "Kafka",
                          "Pulsar",
                          "pubsub",
                          "pubsublite",
                          "HTTPS",
                          "RPC",
                          "AWS SageMaker"
                      ]
                  },
                  "category": {
                      "type": "string",
                      "enum": [
                          "RDBMS",
                          "DataWarehouse",
                          "DataLake",
                          "NoSQL",
                          "ObjectStore",
                          "eventstream",
                          "File",
                          "MLModel",
                          "Application"
                      ]
                  },
                  "domain": {
                      "type": "string"
                  },
                  "catalog": {
                      "type": "string"
                  },
                  "region": {
                      "type": "string"
                  },
                  "zone": {
                      "type": "string"
                  },
                  "datacenter": {
                      "type": "string"
                  },
                  "connectionInfo": {
                      "$ref": "#/components/schemas/DatastoreConn"
                  },
                  "supportsMetadataQuery": {
                      "type": "boolean"
                  },
                  "supportsStreaming": {
                      "type": "boolean"
                  },
                  "config": {
                      "type": "object",
                      "additionalProperties": {
                          "type": "string"
                      }
                  },
                  "json": {
                      "type": "string"
                  },
                  "version": {
                      "type": "string"
                  },
                  "active": {
                      "type": "boolean"
                  },
                  "assetCreatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "assetUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "createdTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "updatedTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "createdBy": {
                      "type": "string"
                  },
                  "updatedBy": {
                      "type": "string"
                  },
                  "owner": {
                      "type": "string"
                  }
              }
          },
          "DatastoreConn": {
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string"
                  },
                  "connectionOptions": {
                      "$ref": "#/components/schemas/ConnectionOptions"
                  },
                  "connectionArguments": {
                      "$ref": "#/components/schemas/ConnectionArguments"
                  }
              }
          },
          "DatastoreList": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/Datastore"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "ResultListDatastore": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/Datastore"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "Domain": {
              "required": [
                  "id"
              ],
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string"
                  },
                  "name": {
                      "type": "string"
                  },
                  "type": {
                      "type": "string"
                  },
                  "description": {
                      "type": "string"
                  },
                  "config": {
                      "type": "object",
                      "additionalProperties": {
                          "type": "string"
                      }
                  },
                  "json": {
                      "type": "string"
                  },
                  "version": {
                      "type": "string"
                  },
                  "active": {
                      "type": "boolean"
                  },
                  "assetCreatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "assetUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "createdTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "updatedTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "createdBy": {
                      "type": "string"
                  },
                  "updatedBy": {
                      "type": "string"
                  },
                  "owner": {
                      "type": "string"
                  }
              }
          },
          "DomainList": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/Domain"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "ResultListDomain": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/Domain"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "JobErrorList": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/JobError"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "JobExecution": {
              "required": [
                  "datasetId",
                  "id",
                  "jobId"
              ],
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string"
                  },
                  "jobId": {
                      "type": "string"
                  },
                  "datasetId": {
                      "type": "string"
                  },
                  "description": {
                      "type": "string"
                  },
                  "lowWatermark": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "highWatermark": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "status": {
                      "type": "string",
                      "enum": [
                          "queued",
                          "running",
                          "finished",
                          "failed",
                          "skipped"
                      ]
                  },
                  "startTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "endTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "durationInSec": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "priority": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "jobExecutionErrors": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/JobError"
                      }
                  },
                  "ownerId": {
                      "type": "string"
                  },
                  "json": {
                      "type": "string"
                  },
                  "version": {
                      "type": "string"
                  },
                  "active": {
                      "type": "boolean"
                  },
                  "assetCreatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "assetUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "createdTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "updatedTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "createdBy": {
                      "type": "string"
                  },
                  "updatedBy": {
                      "type": "string"
                  },
                  "owner": {
                      "type": "string"
                  }
              }
          },
          "ResultListJobExecution": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/JobExecution"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "ProfileTask": {
              "type": "object",
              "properties": {
                  "type": {
                      "type": "string",
                      "enum": [
                          "statistical_analysis",
                          "frequency_analysis",
                          "unique_duplicate_analysis"
                      ]
                  },
                  "json": {
                      "type": "string"
                  },
                  "version": {
                      "type": "string"
                  },
                  "active": {
                      "type": "boolean"
                  },
                  "assetCreatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "assetUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "createdTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "updatedTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "createdBy": {
                      "type": "string"
                  },
                  "updatedBy": {
                      "type": "string"
                  },
                  "owner": {
                      "type": "string"
                  },
                  "id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "type": "string"
                  },
                  "description": {
                      "type": "string"
                  },
                  "datasetId": {
                      "type": "string"
                  },
                  "columns": {
                      "type": "string"
                  },
                  "successMsg": {
                      "type": "string"
                  },
                  "failureMsg": {
                      "type": "string"
                  },
                  "onboardingStatus": {
                      "type": "string",
                      "enum": [
                          "drafted",
                          "deployed",
                          "paused",
                          "under_review",
                          "approved"
                      ]
                  },
                  "executionStatus": {
                      "type": "string",
                      "enum": [
                          "passing",
                          "failing",
                          "pending"
                      ]
                  },
                  "criticalityLevel": {
                      "type": "string",
                      "enum": [
                          "high",
                          "moderate",
                          "less",
                          "not"
                      ]
                  }
              }
          },
          "ResultListProfileTask": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/ProfileTask"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "QualityTask": {
              "type": "object",
              "properties": {
                  "tbd": {
                      "type": "string"
                  },
                  "dqDimension": {
                      "type": "string",
                      "enum": [
                          "accuracy",
                          "validity",
                          "completeness",
                          "comprehensive",
                          "uniqueness",
                          "consistency",
                          "freshness",
                          "cardinality",
                          "coverage",
                          "diversity"
                      ]
                  },
                  "json": {
                      "type": "string"
                  },
                  "version": {
                      "type": "string"
                  },
                  "active": {
                      "type": "boolean"
                  },
                  "assetCreatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "assetUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "createdTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "updatedTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "createdBy": {
                      "type": "string"
                  },
                  "updatedBy": {
                      "type": "string"
                  },
                  "owner": {
                      "type": "string"
                  },
                  "id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "type": "string"
                  },
                  "description": {
                      "type": "string"
                  },
                  "datasetId": {
                      "type": "string"
                  },
                  "columns": {
                      "type": "string"
                  },
                  "successMsg": {
                      "type": "string"
                  },
                  "failureMsg": {
                      "type": "string"
                  },
                  "onboardingStatus": {
                      "type": "string",
                      "enum": [
                          "drafted",
                          "deployed",
                          "paused",
                          "under_review",
                          "approved"
                      ]
                  },
                  "executionStatus": {
                      "type": "string",
                      "enum": [
                          "passing",
                          "failing",
                          "pending"
                      ]
                  },
                  "criticalityLevel": {
                      "type": "string",
                      "enum": [
                          "high",
                          "moderate",
                          "less",
                          "not"
                      ]
                  }
              }
          },
          "ResultListQualityTask": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/QualityTask"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "RuleTask": {
              "required": [
                  "ruleType",
                  "ruleValue"
              ],
              "type": "object",
              "properties": {
                  "exprValidColNames": {
                      "type": "string"
                  },
                  "ruleValueHR": {
                      "type": "string"
                  },
                  "ruleValue": {
                      "type": "string"
                  },
                  "ruleType": {
                      "type": "string",
                      "enum": [
                          "expression",
                          "regex",
                          "standard_validation"
                      ]
                  },
                  "expressionType": {
                      "type": "string",
                      "enum": [
                          "spel",
                          "mvel",
                          "cep"
                      ]
                  },
                  "regexType": {
                      "type": "string",
                      "enum": [
                          "java",
                          "hyperscan"
                      ]
                  },
                  "standardValidationType": {
                      "type": "string",
                      "enum": [
                          "date",
                          "country",
                          "email",
                          "phone",
                          "address",
                          "ipaddress",
                          "hostname"
                      ]
                  },
                  "standardNameForValidation": {
                      "type": "string"
                  },
                  "applicableScope": {
                      "type": "string",
                      "enum": [
                          "row",
                          "col",
                          "metrics",
                          "quality",
                          "schema",
                          "governance"
                      ]
                  },
                  "dqDimension": {
                      "type": "string",
                      "enum": [
                          "accuracy",
                          "validity",
                          "completeness",
                          "comprehensive",
                          "uniqueness",
                          "consistency",
                          "freshness",
                          "cardinality",
                          "coverage",
                          "diversity"
                      ]
                  },
                  "json": {
                      "type": "string"
                  },
                  "version": {
                      "type": "string"
                  },
                  "active": {
                      "type": "boolean"
                  },
                  "assetCreatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "assetUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "createdTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "updatedTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "createdBy": {
                      "type": "string"
                  },
                  "updatedBy": {
                      "type": "string"
                  },
                  "owner": {
                      "type": "string"
                  },
                  "id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "name": {
                      "type": "string"
                  },
                  "description": {
                      "type": "string"
                  },
                  "datasetId": {
                      "type": "string"
                  },
                  "columns": {
                      "type": "string"
                  },
                  "successMsg": {
                      "type": "string"
                  },
                  "failureMsg": {
                      "type": "string"
                  },
                  "onboardingStatus": {
                      "type": "string",
                      "enum": [
                          "drafted",
                          "deployed",
                          "paused",
                          "under_review",
                          "approved"
                      ]
                  },
                  "executionStatus": {
                      "type": "string",
                      "enum": [
                          "passing",
                          "failing",
                          "pending"
                      ]
                  },
                  "criticalityLevel": {
                      "type": "string",
                      "enum": [
                          "high",
                          "moderate",
                          "less",
                          "not"
                      ]
                  }
              }
          },
          "ResultListRuleTask": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/RuleTask"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "Feedback": {
              "required": [
                  "content"
              ],
              "type": "object",
              "properties": {
                  "userId": {
                      "type": "string"
                  },
                  "content": {
                      "type": "string"
                  },
                  "pageURL": {
                      "type": "string"
                  },
                  "datasetId": {
                      "type": "string"
                  },
                  "attachmentURLs": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "status": {
                      "type": "string",
                      "enum": [
                          "submitted",
                          "ack",
                          "processing",
                          "completed"
                      ]
                  },
                  "json": {
                      "type": "string"
                  },
                  "version": {
                      "type": "string"
                  },
                  "active": {
                      "type": "boolean"
                  },
                  "assetCreatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "assetUpdatedDate": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "createdTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "updatedTime": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "createdBy": {
                      "type": "string"
                  },
                  "updatedBy": {
                      "type": "string"
                  },
                  "owner": {
                      "type": "string"
                  }
              }
          },
          "UserList": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/User"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "ResultListUser": {
              "required": [
                  "data"
              ],
              "type": "object",
              "properties": {
                  "data": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/User"
                      }
                  },
                  "paging": {
                      "$ref": "#/components/schemas/Paging"
                  }
              }
          },
          "AuthenticationConfig": {
              "required": [
                  "authority",
                  "callbackUrl",
                  "clientId",
                  "jwtPrincipalClaims",
                  "provider",
                  "providerName",
                  "publicKeyUrls"
              ],
              "type": "object",
              "properties": {
                  "provider": {
                      "type": "string"
                  },
                  "providerName": {
                      "type": "string"
                  },
                  "publicKeyUrls": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "authority": {
                      "type": "string"
                  },
                  "clientId": {
                      "type": "string"
                  },
                  "callbackUrl": {
                      "type": "string"
                  },
                  "jwtPrincipalClaims": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "staticDevTokens": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "enableSelfSignup": {
                      "type": "boolean"
                  }
              }
          }
      }
  }
}